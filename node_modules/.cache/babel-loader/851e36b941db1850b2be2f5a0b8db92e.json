{"ast":null,"code":"var _jsxFileName = \"/Users/khalidalmahrezi/Documents/GitHub/TeamNameNotFound/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 20;\nconst START_NODE_COL = 3;\nconst FINISH_NODE_ROW = 33;\nconst FINISH_NODE_COL = 42;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 1 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 1 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 1 * i);\n    }\n  }\n\n  visualizeDijkstra(textinput) {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[textinput.slice(0, 2)][textinput.slice(2)];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"searchBox\",\n        id: \"searchBox\",\n        placeholder: \"Call No.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(document.getElementById(\"searchBox\").value),\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  const Wallpoints = ['1,3', '1,4', '1,5', '1,6', '1,7', '1,8', '1,9', '1,10', '1,12', '1,13', '1,14', '1,15', '1,16', '1,17', '1,18', '1,19', '1,21', '1,22', '1,23', '1,24', '1,25', '1,26', '1,27', '1,28', '1,30', '1,31', '1,32', '1,33', '1,34', '1,35', '1,36', '1,37', '1,39', '1,40', '1,41', '1,42', '1,43', '1,44', '1,45', '1,46', '1,48', '1,49', '1,50', '1,51', '1,52', '1,53', '1,54', '1,55', '3,3', '3,4', '3,5', '3,6', '3,7', '3,8', '3,9', '3,10', '3,12', '3,13', '3,14', '3,15', '3,16', '3,17', '3,18', '3,19', '3,21', '3,22', '3,23', '3,24', '3,25', '3,26', '3,27', '3,28', '3,30', '3,31', '3,32', '3,33', '3,34', '3,35', '3,36', '3,37', '3,39', '3,40', '3,41', '3,42', '3,43', '3,44', '3,45', '3,46', '3,48', '3,49', '3,50', '3,51', '3,52', '3,53', '3,54', '3,55', '4,3', '4,4', '4,5', '4,6', '4,7', '4,8', '4,9', '4,10', '4,12', '4,13', '4,14', '4,15', '4,16', '4,17', '4,18', '4,19', '4,21', '4,22', '4,23', '4,24', '4,25', '4,26', '4,27', '4,28', '4,30', '4,31', '4,32', '4,33', '4,34', '4,35', '4,36', '4,37', '4,39', '4,40', '4,41', '4,42', '4,43', '4,44', '4,45', '4,46', '4,48', '4,49', '4,50', '4,51', '4,52', '4,53', '4,54', '4,55', '6,3', '6,4', '6,5', '6,6', '6,7', '6,8', '6,9', '6,10', '6,12', '6,13', '6,14', '6,15', '6,16', '6,17', '6,18', '6,19', '6,21', '6,22', '6,23', '6,24', '6,25', '6,26', '6,27', '6,28', '6,30', '6,31', '6,32', '6,33', '6,34', '6,35', '6,36', '6,37', '6,39', '6,40', '6,41', '6,42', '6,43', '6,44', '6,45', '6,46', '6,48', '6,49', '6,50', '6,51', '6,52', '6,53', '6,54', '6,55', '7,3', '7,4', '7,5', '7,6', '7,7', '7,8', '7,9', '7,10', '7,12', '7,13', '7,14', '7,15', '7,16', '7,17', '7,18', '7,19', '7,21', '7,22', '7,23', '7,24', '7,25', '7,26', '7,27', '7,28', '7,30', '7,31', '7,32', '7,33', '7,34', '7,35', '7,36', '7,37', '7,39', '7,40', '7,41', '7,42', '7,43', '7,44', '7,45', '7,46', '7,48', '7,49', '7,50', '7,51', '7,52', '7,53', '7,54', '7,55', '9,3', '9,4', '9,5', '9,6', '9,7', '9,8', '9,9', '9,10', '9,12', '9,13', '9,14', '9,15', '9,16', '9,17', '9,18', '9,19', '9,21', '9,22', '9,23', '9,24', '9,25', '9,26', '9,27', '9,28', '9,30', '9,31', '9,32', '9,33', '9,34', '9,35', '9,36', '9,37', '9,39', '9,40', '9,41', '9,42', '9,43', '9,44', '9,45', '9,46', '9,48', '9,49', '9,50', '9,51', '9,52', '9,53', '9,54', '9,55', '10,3', '10,4', '10,5', '10,6', '10,7', '10,8', '10,9', '10,10', '10,12', '10,13', '10,14', '10,15', '10,16', '10,17', '10,18', '10,19', '10,21', '10,22', '10,23', '10,24', '10,25', '10,26', '10,27', '10,28', '10,30', '10,31', '10,32', '10,33', '10,34', '10,35', '10,36', '10,37', '10,39', '10,40', '10,41', '10,42', '10,43', '10,44', '10,45', '10,46', '10,48', '10,49', '10,50', '10,51', '10,52', '10,53', '10,54', '10,55', '12,3', '12,4', '12,5', '12,6', '12,7', '12,8', '12,9', '12,10', '12,12', '12,13', '12,14', '12,15', '12,16', '12,17', '12,18', '12,19', '12,21', '12,22', '12,23', '12,24', '12,25', '12,26', '12,27', '12,28', '12,30', '12,31', '12,32', '12,33', '12,34', '12,35', '12,36', '12,37', '12,39', '12,40', '12,41', '12,42', '12,43', '12,44', '12,45', '12,46', '12,48', '12,49', '12,50', '12,51', '12,52', '12,53', '12,54', '12,55', '13,3', '13,4', '13,5', '13,6', '13,7', '13,8', '13,9', '13,10', '13,12', '13,13', '13,14', '13,15', '13,16', '13,17', '13,18', '13,19', '13,21', '13,22', '13,23', '13,24', '13,25', '13,26', '13,27', '13,28', '13,30', '13,31', '13,32', '13,33', '13,34', '13,35', '13,36', '13,37', '13,39', '13,40', '13,41', '13,42', '13,43', '13,44', '13,45', '13,46', '13,48', '13,49', '13,50', '13,51', '13,52', '13,53', '13,54', '13,55', '15,3', '15,4', '15,5', '15,6', '15,7', '15,8', '15,9', '15,10', '15,12', '15,13', '15,14', '15,15', '15,16', '15,17', '15,18', '15,19', '15,21', '15,22', '15,23', '15,24', '15,25', '15,26', '15,27', '15,28', '15,30', '15,31', '15,32', '15,33', '15,34', '15,35', '15,36', '15,37', '15,39', '15,40', '15,41', '15,42', '15,43', '15,44', '15,45', '15,46', '15,48', '15,49', '15,50', '15,51', '15,52', '15,53', '15,54', '15,55', '24,3', '24,4', '24,5', '24,6', '24,7', '24,8', '24,9', '24,10', '24,12', '24,13', '24,14', '24,15', '24,16', '24,17', '24,18', '24,19', '24,21', '24,22', '24,23', '24,24', '24,25', '24,26', '24,27', '24,28', '24,30', '24,31', '24,32', '24,33', '24,34', '24,35', '24,36', '24,37', '24,39', '24,40', '24,41', '24,42', '24,43', '24,44', '24,45', '24,46', '24,48', '24,49', '24,50', '24,51', '24,52', '24,53', '24,54', '24,55', '26,3', '26,4', '26,5', '26,6', '26,7', '26,8', '26,9', '26,10', '26,12', '26,13', '26,14', '26,15', '26,16', '26,17', '26,18', '26,19', '26,21', '26,22', '26,23', '26,24', '26,25', '26,26', '26,27', '26,28', '26,30', '26,31', '26,32', '26,33', '26,34', '26,35', '26,36', '26,37', '26,39', '26,40', '26,41', '26,42', '26,43', '26,44', '26,45', '26,46', '26,48', '26,49', '26,50', '26,51', '26,52', '26,53', '26,54', '26,55', '27,3', '27,4', '27,5', '27,6', '27,7', '27,8', '27,9', '27,10', '27,12', '27,13', '27,14', '27,15', '27,16', '27,17', '27,18', '27,19', '27,21', '27,22', '27,23', '27,24', '27,25', '27,26', '27,27', '27,28', '27,30', '27,31', '27,32', '27,33', '27,34', '27,35', '27,36', '27,37', '27,39', '27,40', '27,41', '27,42', '27,43', '27,44', '27,45', '27,46', '27,48', '27,49', '27,50', '27,51', '27,52', '27,53', '27,54', '27,55', '29,3', '29,4', '29,5', '29,6', '29,7', '29,8', '29,9', '29,10', '29,12', '29,13', '29,14', '29,15', '29,16', '29,17', '29,18', '29,19', '29,21', '29,22', '29,23', '29,24', '29,25', '29,26', '29,27', '29,28', '29,30', '29,31', '29,32', '29,33', '29,34', '29,35', '29,36', '29,37', '29,39', '29,40', '29,41', '29,42', '29,43', '29,44', '29,45', '29,46', '29,48', '29,49', '29,50', '29,51', '29,52', '29,53', '29,54', '29,55', '30,3', '30,4', '30,5', '30,6', '30,7', '30,8', '30,9', '30,10', '30,12', '30,13', '30,14', '30,15', '30,16', '30,17', '30,18', '30,19', '30,21', '30,22', '30,23', '30,24', '30,25', '30,26', '30,27', '30,28', '30,30', '30,31', '30,32', '30,33', '30,34', '30,35', '30,36', '30,37', '30,39', '30,40', '30,41', '30,42', '30,43', '30,44', '30,45', '30,46', '30,48', '30,49', '30,50', '30,51', '30,52', '30,53', '30,54', '30,55', '32,3', '32,4', '32,5', '32,6', '32,7', '32,8', '32,9', '32,10', '32,12', '32,13', '32,14', '32,15', '32,16', '32,17', '32,18', '32,19', '32,21', '32,22', '32,23', '32,24', '32,25', '32,26', '32,27', '32,28', '32,30', '32,31', '32,32', '32,33', '32,34', '32,35', '32,36', '32,37', '32,39', '32,40', '32,41', '32,42', '32,43', '32,44', '32,45', '32,46', '32,48', '32,49', '32,50', '32,51', '32,52', '32,53', '32,54', '32,55', '33,3', '33,4', '33,5', '33,6', '33,7', '33,8', '33,9', '33,10', '33,12', '33,13', '33,14', '33,15', '33,16', '33,17', '33,18', '33,19', '33,21', '33,22', '33,23', '33,24', '33,25', '33,26', '33,27', '33,28', '33,30', '33,31', '33,32', '33,33', '33,34', '33,35', '33,36', '33,37', '33,39', '33,40', '33,41', '33,42', '33,43', '33,44', '33,45', '33,46', '33,48', '33,49', '33,50', '33,51', '33,52', '33,53', '33,54', '33,55', '35,3', '35,4', '35,5', '35,6', '35,7', '35,8', '35,9', '35,10', '35,12', '35,13', '35,14', '35,15', '35,16', '35,17', '35,18', '35,19', '35,21', '35,22', '35,23', '35,24', '35,25', '35,26', '35,27', '35,28', '35,30', '35,31', '35,32', '35,33', '35,34', '35,35', '35,36', '35,37', '35,39', '35,40', '35,41', '35,42', '35,43', '35,44', '35,45', '35,46', '35,48', '35,49', '35,50', '35,51', '35,52', '35,53', '35,54', '35,55', '36,3', '36,4', '36,5', '36,6', '36,7', '36,8', '36,9', '36,10', '36,12', '36,13', '36,14', '36,15', '36,16', '36,17', '36,18', '36,19', '36,21', '36,22', '36,23', '36,24', '36,25', '36,26', '36,27', '36,28', '36,30', '36,31', '36,32', '36,33', '36,34', '36,35', '36,36', '36,37', '36,39', '36,40', '36,41', '36,42', '36,43', '36,44', '36,45', '36,46', '36,48', '36,49', '36,50', '36,51', '36,52', '36,53', '36,54', '36,55', '38,3', '38,4', '38,5', '38,6', '38,7', '38,8', '38,9', '38,10', '38,12', '38,13', '38,14', '38,15', '38,16', '38,17', '38,18', '38,19', '38,21', '38,22', '38,23', '38,24', '38,25', '38,26', '38,27', '38,28', '38,30', '38,31', '38,32', '38,33', '38,34', '38,35', '38,36', '38,37', '38,39', '38,40', '38,41', '38,42', '38,43', '38,44', '38,45', '38,46', '38,48', '38,49', '38,50', '38,51', '38,52', '38,53', '38,54', '38,55', '17,8', '17,9', '17,10', '17,12', '17,13', '17,14', '17,15', '17,16', '17,17', '17,18', '17,19', '17,21', '17,22', '17,23', '17,24', '17,25', '17,26', '17,27', '17,28', '17,30', '17,31', '17,32', '17,33', '17,34', '17,35', '17,36', '17,37', '17,39', '17,40', '17,41', '17,42', '17,43', '17,44', '17,45', '17,46', '17,48', '17,49', '17,50', '19,8', '19,9', '19,10', '19,12', '19,13', '19,14', '19,15', '19,16', '19,17', '19,18', '19,19', '19,21', '19,22', '19,23', '19,24', '19,25', '19,26', '19,27', '19,28', '19,30', '19,31', '19,32', '19,33', '19,34', '19,35', '19,36', '19,37', '19,39', '19,40', '19,41', '19,42', '19,43', '19,44', '19,45', '19,46', '19,48', '19,49', '19,50', '21,8', '21,9', '21,10', '21,12', '21,13', '21,14', '21,15', '21,16', '21,17', '21,18', '21,19', '21,21', '21,22', '21,23', '21,24', '21,25', '21,26', '21,27', '21,28', '21,30', '21,31', '21,32', '21,33', '21,34', '21,35', '21,36', '21,37', '21,39', '21,40', '21,41', '21,42', '21,43', '21,44', '21,45', '21,46', '21,48', '21,49', '21,50', '16,0', '17,0', '17,1', '17,2', '18,0', '18,1', '18,2', '19,0', '19,1', '19,2', '20,0', '20,1', '20,2', '21,0', '21,1', '21,2', '22,0', '16,59', '17,57', '17,58', '17,59', '18,57', '18,58', '18,59', '19,57', '19,58', '19,59', '20,57', '20,58', '20,59', '21,57', '21,58', '21,59', '22,59'];\n\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 60; col++) {\n      const test = [row, col];\n      let text = test.toString();\n\n      if (Wallpoints.includes(text)) {\n        currentRow.push(createWall(col, row));\n        console.log('in if statment########################');\n      } else {\n        console.log('in if statment########################');\n        currentRow.push(createNode(col, row));\n      }\n    }\n\n    grid.push(currentRow);\n  }\n  /*\n    for (let row = 0; row < 34; row++) {\n   for (let col = 0; col < 60; col++) {\n     if ((row === 1) && (col === 0)){\n       const newGrid = grid.slice();\n       const node = newGrid[row][col];\n       const newNode = {\n       ...node,\n       isWall: !node.isWall,\n     };\n     newGrid[row][col] = newNode;\n    }\n   grid.push(currentRow);\n  }*/\n\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst createWall = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: true,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/khalidalmahrezi/Documents/GitHub/TeamNameNotFound/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","textinput","startNode","finishNode","slice","render","value","map","rowIdx","nodeIdx","isFinish","isStart","isWall","Wallpoints","currentRow","test","text","toString","includes","push","createWall","console","log","createNode","distance","Infinity","isVisited","previousNode","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 20;\nconst START_NODE_COL =3;\nconst FINISH_NODE_ROW = 33;\nconst FINISH_NODE_COL = 42;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 1 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 1 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 1 * i);\n    }\n  }\n\n  visualizeDijkstra(textinput) {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[textinput.slice(0,2)][textinput.slice(2)];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n    \n\n    return (\n      <>        \n        <input type='text' name =\"searchBox\" id=\"searchBox\" placeholder=\"Call No.\" />\n      \n        <button onClick={() => this.visualizeDijkstra(document.getElementById(\"searchBox\").value)}>\n          Search\n        </button>\n        \n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  const Wallpoints = ['1,3', '1,4', '1,5','1,6','1,7','1,8','1,9','1,10','1,12','1,13','1,14','1,15','1,16','1,17','1,18','1,19','1,21','1,22','1,23','1,24','1,25','1,26','1,27','1,28','1,30','1,31','1,32','1,33','1,34','1,35','1,36','1,37','1,39','1,40','1,41','1,42','1,43','1,44','1,45','1,46','1,48','1,49','1,50','1,51','1,52','1,53','1,54','1,55',\n  '3,3', '3,4', '3,5','3,6','3,7','3,8','3,9','3,10','3,12','3,13','3,14','3,15','3,16','3,17','3,18','3,19','3,21','3,22','3,23','3,24','3,25','3,26','3,27','3,28','3,30','3,31','3,32','3,33','3,34','3,35','3,36','3,37','3,39','3,40','3,41','3,42','3,43','3,44','3,45','3,46','3,48','3,49','3,50','3,51','3,52','3,53','3,54','3,55',\n  '4,3', '4,4', '4,5','4,6','4,7','4,8','4,9','4,10','4,12','4,13','4,14','4,15','4,16','4,17','4,18','4,19','4,21','4,22','4,23','4,24','4,25','4,26','4,27','4,28','4,30','4,31','4,32','4,33','4,34','4,35','4,36','4,37','4,39','4,40','4,41','4,42','4,43','4,44','4,45','4,46','4,48','4,49','4,50','4,51','4,52','4,53','4,54','4,55',\n  '6,3', '6,4', '6,5','6,6','6,7','6,8','6,9','6,10','6,12','6,13','6,14','6,15','6,16','6,17','6,18','6,19','6,21','6,22','6,23','6,24','6,25','6,26','6,27','6,28','6,30','6,31','6,32','6,33','6,34','6,35','6,36','6,37','6,39','6,40','6,41','6,42','6,43','6,44','6,45','6,46','6,48','6,49','6,50','6,51','6,52','6,53','6,54','6,55',\n  '7,3', '7,4', '7,5','7,6','7,7','7,8','7,9','7,10','7,12','7,13','7,14','7,15','7,16','7,17','7,18','7,19','7,21','7,22','7,23','7,24','7,25','7,26','7,27','7,28','7,30','7,31','7,32','7,33','7,34','7,35','7,36','7,37','7,39','7,40','7,41','7,42','7,43','7,44','7,45','7,46','7,48','7,49','7,50','7,51','7,52','7,53','7,54','7,55',\n  '9,3', '9,4', '9,5','9,6','9,7','9,8','9,9','9,10','9,12','9,13','9,14','9,15','9,16','9,17','9,18','9,19','9,21','9,22','9,23','9,24','9,25','9,26','9,27','9,28','9,30','9,31','9,32','9,33','9,34','9,35','9,36','9,37','9,39','9,40','9,41','9,42','9,43','9,44','9,45','9,46','9,48','9,49','9,50','9,51','9,52','9,53','9,54','9,55'\n  ,'10,3', '10,4', '10,5', '10,6', '10,7', '10,8', '10,9', '10,10', '10,12', '10,13', '10,14', '10,15', '10,16', '10,17', '10,18', '10,19', '10,21', '10,22', '10,23', '10,24', '10,25', '10,26', '10,27', '10,28', '10,30', '10,31', '10,32', '10,33', '10,34', '10,35', '10,36', '10,37', '10,39', '10,40', '10,41', '10,42', '10,43',\n   '10,44', '10,45', '10,46', '10,48', '10,49', '10,50', '10,51', '10,52', '10,53', '10,54', '10,55',\n  '12,3', '12,4', '12,5', '12,6', '12,7', '12,8', '12,9', '12,10', '12,12', '12,13', '12,14', '12,15', '12,16', '12,17', '12,18', '12,19', '12,21', '12,22', '12,23', '12,24', '12,25', '12,26', '12,27', '12,28', '12,30', '12,31', '12,32', '12,33', '12,34', '12,35', '12,36', '12,37', '12,39', '12,40', '12,41', '12,42', '12,43', '12,44',\n   '12,45', '12,46', '12,48', '12,49', '12,50', '12,51', '12,52', '12,53', '12,54', '12,55',\n   '13,3', '13,4', '13,5', '13,6', '13,7', '13,8', '13,9', '13,10', '13,12', '13,13', '13,14', '13,15', '13,16', '13,17', '13,18', '13,19', '13,21', '13,22', '13,23', '13,24', '13,25', '13,26', '13,27', '13,28', '13,30', '13,31', '13,32', '13,33', '13,34', '13,35', '13,36', '13,37', '13,39', '13,40', '13,41', '13,42', '13,43',\n    '13,44', '13,45', '13,46', '13,48', '13,49', '13,50', '13,51', '13,52', '13,53', '13,54', '13,55',\n    '15,3', '15,4', '15,5', '15,6', '15,7', '15,8', '15,9', '15,10', '15,12', '15,13', '15,14', '15,15', '15,16', '15,17', '15,18', '15,19', '15,21', '15,22', '15,23', '15,24', '15,25', '15,26', '15,27', '15,28', '15,30', '15,31', '15,32', '15,33', '15,34', '15,35', '15,36', '15,37', '15,39', '15,40', '15,41', '15,42', '15,43',\n     '15,44', '15,45', '15,46', '15,48', '15,49', '15,50', '15,51', '15,52', '15,53', '15,54', '15,55',\n     '24,3','24,4', '24,5','24,6', '24,7', '24,8', '24,9', '24,10', '24,12', '24,13','24,14','24,15','24,16','24,17','24,18','24,19',\n     '24,21', '24,22', '24,23', '24,24', '24,25', '24,26', '24,27', '24,28',\n     '24,30', '24,31',\t'24,32', '24,33', '24,34',\t'24,35', '24,36',\t'24,37',\n     '24,39','24,40', '24,41',\t'24,42',\t'24,43',\t'24,44',\t'24,45',\t'24,46',\n     '24,48',\t'24,49',\t'24,50',\t'24,51',\t'24,52',\t'24,53',\t'24,54','24,55',\n     '26,3', '26,4',\t'26,5',\t'26,6',\t'26,7',\t'26,8',\t'26,9',\t'26,10',\n     '26,12',\t'26,13',\t'26,14',\t'26,15',\t'26,16',\t'26,17',\t'26,18', '26,19',\n     '26,21',\t'26,22', '26,23',\t'26,24',\t'26,25',\t'26,26',\t'26,27',\t'26,28',\n     '26,30',\t'26,31',\t'26,32',\t'26,33',\t'26,34',\t'26,35',\t'26,36',\t'26,37',\n     '26,39',\t'26,40',\t'26,41',\t'26,42',\t'26,43', '26,44',\t'26,45', '26,46',\n     '26,48',\t'26,49', '26,50',\t'26,51',\t'26,52',\t'26,53', '26,54', '26,55',\n     '27,3',\t'27,4',\t'27,5',\t'27,6',\t'27,7',\t'27,8',\t'27,9',\t'27,10',\n     '27,12',\t'27,13',\t'27,14', '27,15',\t'27,16',\t'27,17',\t'27,18',\t'27,19',\n     '27,21',\t'27,22',\t'27,23',\t'27,24',\t'27,25',\t'27,26',\t'27,27',\t'27,28',\n     '27,30', '27,31',\t'27,32',\t'27,33',\t'27,34',\t'27,35',\t'27,36',\t'27,37',\n     '27,39',\t'27,40',\t'27,41',\t'27,42',\t'27,43',\t'27,44', '27,45',\t'27,46',\n     '27,48',\t'27,49',\t'27,50',\t'27,51',\t'27,52',\t'27,53',\t'27,54', '27,55',\n     '29,3', '29,4',\t'29,5',\t'29,6',\t'29,7',\t'29,8',\t'29,9',\t'29,10',\n     '29,12',\t'29,13',\t'29,14',\t'29,15',\t'29,16',\t'29,17',\t'29,18',\t'29,19',\n     '29,21',\t'29,22',\t'29,23',\t'29,24',\t'29,25', '29,26'\t,'29,27',\t'29,28',\n     '29,30',\t'29,31',\t'29,32',\t'29,33',\t'29,34',\t'29,35',\t'29,36', '29,37',\n     '29,39',\t'29,40',\t'29,41',\t'29,42',\t'29,43',\t'29,44',\t'29,45',\t'29,46',\n     '29,48',\t'29,49',\t'29,50',\t'29,51',\t'29,52',\t'29,53',\t'29,54',\t'29,55',\n     '30,3', '30,4', '30,5', '30,6', '30,7', '30,8', '30,9', '30,10', \n     '30,12', '30,13', '30,14', '30,15', '30,16', '30,17', '30,18', '30,19',\n     '30,21', '30,22', '30,23', '30,24', '30,25', '30,26', '30,27', '30,28',\n     '30,30', '30,31', '30,32', '30,33', '30,34', '30,35', '30,36', '30,37', \n     '30,39', '30,40', '30,41', '30,42', '30,43', '30,44', '30,45', '30,46', \n     '30,48', '30,49', '30,50', '30,51', '30,52', '30,53', '30,54', '30,55',\n     '32,3', '32,4', '32,5', '32,6', '32,7', '32,8', '32,9', '32,10', \n     '32,12', '32,13', '32,14', '32,15', '32,16', '32,17', '32,18', '32,19', \n     '32,21', '32,22', '32,23', '32,24', '32,25', '32,26', '32,27', '32,28', \n     '32,30', '32,31', '32,32', '32,33', '32,34', '32,35', '32,36', '32,37', \n     '32,39', '32,40', '32,41', '32,42', '32,43', '32,44', '32,45', '32,46', \n     '32,48', '32,49', '32,50', '32,51', '32,52', '32,53', '32,54', '32,55',\n     '33,3', '33,4', '33,5', '33,6', '33,7', '33,8', '33,9', '33,10', '33,12', '33,13', '33,14', '33,15', '33,16', '33,17', '33,18', '33,19', '33,21', '33,22', '33,23', '33,24', '33,25', '33,26', '33,27', '33,28', '33,30', '33,31', '33,32', '33,33', '33,34', '33,35', '33,36', '33,37', '33,39', '33,40', '33,41', '33,42', '33,43', '33,44', '33,45', '33,46', '33,48', '33,49', '33,50', '33,51', '33,52', '33,53', '33,54', '33,55',\n     '35,3', '35,4', '35,5', '35,6', '35,7', '35,8', '35,9', '35,10', '35,12', '35,13', '35,14', '35,15', '35,16', '35,17', '35,18', '35,19', '35,21', '35,22', '35,23', '35,24', '35,25', '35,26', '35,27', '35,28', '35,30', '35,31', '35,32', '35,33', '35,34', '35,35', '35,36', '35,37', '35,39', '35,40', '35,41', '35,42', '35,43', '35,44', '35,45', '35,46', '35,48', '35,49', '35,50', '35,51', '35,52', '35,53', '35,54', '35,55',\n     '36,3', '36,4', '36,5', '36,6', '36,7', '36,8', '36,9', '36,10', '36,12', '36,13', '36,14', '36,15', '36,16', '36,17', '36,18', '36,19', '36,21', '36,22', '36,23', '36,24', '36,25', '36,26', '36,27', '36,28', '36,30', '36,31', '36,32', '36,33', '36,34', '36,35', '36,36', '36,37', '36,39', '36,40', '36,41', '36,42', '36,43', '36,44', '36,45', '36,46', '36,48', '36,49', '36,50', '36,51', '36,52', '36,53', '36,54', '36,55',\n     '38,3', '38,4', '38,5', '38,6', '38,7', '38,8', '38,9', '38,10', '38,12', '38,13', '38,14', '38,15', '38,16', '38,17', '38,18', '38,19', '38,21', '38,22', '38,23', '38,24', '38,25', '38,26', '38,27', '38,28', '38,30', '38,31', '38,32', '38,33', '38,34', '38,35', '38,36', '38,37', '38,39', '38,40', '38,41', '38,42', '38,43', '38,44', '38,45', '38,46', '38,48', '38,49', '38,50', '38,51', '38,52', '38,53', '38,54', '38,55',\n     '17,8', '17,9', '17,10', '17,12', '17,13', '17,14', '17,15', '17,16', '17,17', '17,18', '17,19', '17,21', '17,22', '17,23', '17,24', '17,25', '17,26', '17,27', '17,28', '17,30', '17,31', '17,32', '17,33', '17,34', '17,35', '17,36', '17,37', '17,39', '17,40', '17,41', '17,42', '17,43', '17,44', '17,45', '17,46', '17,48', '17,49', '17,50',\n     '19,8', '19,9', '19,10', '19,12', '19,13', '19,14', '19,15', '19,16', '19,17', '19,18', '19,19', '19,21', '19,22', '19,23', '19,24', '19,25', '19,26', '19,27', '19,28', '19,30', '19,31', '19,32', '19,33', '19,34', '19,35', '19,36', '19,37', '19,39', '19,40', '19,41', '19,42', '19,43', '19,44', '19,45', '19,46', '19,48', '19,49', '19,50',\n     '21,8', '21,9', '21,10', '21,12', '21,13', '21,14', '21,15', '21,16', '21,17', '21,18', '21,19', '21,21', '21,22', '21,23', '21,24', '21,25', '21,26', '21,27', '21,28', '21,30', '21,31', '21,32', '21,33', '21,34', '21,35', '21,36', '21,37', '21,39', '21,40', '21,41', '21,42', '21,43', '21,44', '21,45', '21,46', '21,48', '21,49', '21,50'\n     ,'16,0', '17,0', '17,1','17,2', '18,0', '18,1','18,2',  '19,0', '19,1','19,2',  '20,0', '20,1','20,2',  '21,0', '21,1','21,2', '22,0'\n     ,'16,59', '17,57', '17,58','17,59', '18,57', '18,58','18,59',  '19,57', '19,58','19,59',  '20,57', '20,58','20,59',  '21,57', '21,58','21,59', '22,59'];\n\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 60; col++) {\n      const test = [row,col];\n      let text = test.toString();\n      if (Wallpoints.includes(text)) {\n        \n        currentRow.push(createWall(col, row));\n        console.log('in if statment########################');\n\n      }else{\n        console.log('in if statment########################');\n        currentRow.push(createNode(col, row));\n      }\n\n    }\n    grid.push(currentRow);\n  }/*\n  \n  for (let row = 0; row < 34; row++) {\n    for (let col = 0; col < 60; col++) {\n      if ((row === 1) && (col === 0)){\n        const newGrid = grid.slice();\n        const node = newGrid[row][col];\n        const newNode = {\n        ...node,\n        isWall: !node.isWall,\n      };\n      newGrid[row][col] = newNode;\n\n    }\n    grid.push(currentRow);\n  }*/\n  \n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst createWall = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: true,\n    previousNode: null,\n  };\n}; \n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}