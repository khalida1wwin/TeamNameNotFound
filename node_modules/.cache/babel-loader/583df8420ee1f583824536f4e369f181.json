{"ast":null,"code":"var _jsxFileName = \"/Users/khalidalmahrezi/Documents/GitHub/TeamNameNotFound/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 30;\nconst START_NODE_COL = 55;\nconst FINISH_NODE_ROW = 1;\nconst FINISH_NODE_COL = 2;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 1 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 1 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 1 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.visualizeDijkstra(),\n        children: \"do the thing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  const Wallpoints = ['1,3', '1,4', '1,5', '1,6', '1,7', '1,8', '1,9', '1,10', '1,12', '1,13', '1,14', '1,15', '1,16', '1,17', '1,18', '1,19', '1,21', '1,22', '1,23', '1,24', '1,25', '1,26', '1,27', '1,28', '1,30', '1,31', '1,32', '1,33', '1,34', '1,35', '1,36', '1,37', '1,39', '1,40', '1,41', '1,42', '1,43', '1,44', '1,45', '1,46', '1,48', '1,49', '1,50', '1,51', '1,52', '1,53', '1,54', '1,55', '3,3', '3,4', '3,5', '3,6', '3,7', '3,8', '3,9', '3,10', '3,12', '3,13', '3,14', '3,15', '3,16', '3,17', '3,18', '3,19', '3,21', '3,22', '3,23', '3,24', '3,25', '3,26', '3,27', '3,28', '3,30', '3,31', '3,32', '3,33', '3,34', '3,35', '3,36', '3,37', '3,39', '3,40', '3,41', '3,42', '3,43', '3,44', '3,45', '3,46', '3,48', '3,49', '3,50', '3,51', '3,52', '3,53', '3,54', '3,55', '4,3', '4,4', '4,5', '4,6', '4,7', '4,8', '4,9', '4,10', '4,12', '4,13', '4,14', '4,15', '4,16', '4,17', '4,18', '4,19', '4,21', '4,22', '4,23', '4,24', '4,25', '4,26', '4,27', '4,28', '4,30', '4,31', '4,32', '4,33', '4,34', '4,35', '4,36', '4,37', '4,39', '4,40', '4,41', '4,42', '4,43', '4,44', '4,45', '4,46', '4,48', '4,49', '4,50', '4,51', '4,52', '4,53', '4,54', '4,55', '6,3', '6,4', '6,5', '6,6', '6,7', '6,8', '6,9', '6,10', '6,12', '6,13', '6,14', '6,15', '6,16', '6,17', '6,18', '6,19', '6,21', '6,22', '6,23', '6,24', '6,25', '6,26', '6,27', '6,28', '6,30', '6,31', '6,32', '6,33', '6,34', '6,35', '6,36', '6,37', '6,39', '6,40', '6,41', '6,42', '6,43', '6,44', '6,45', '6,46', '6,48', '6,49', '6,50', '6,51', '6,52', '6,53', '6,54', '6,55', '7,3', '7,4', '7,5', '7,6', '7,7', '7,8', '7,9', '7,10', '7,12', '7,13', '7,14', '7,15', '7,16', '7,17', '7,18', '7,19', '7,21', '7,22', '7,23', '7,24', '7,25', '7,26', '7,27', '7,28', '7,30', '7,31', '7,32', '7,33', '7,34', '7,35', '7,36', '7,37', '7,39', '7,40', '7,41', '7,42', '7,43', '7,44', '7,45', '7,46', '7,48', '7,49', '7,50', '7,51', '7,52', '7,53', '7,54', '7,55', '9,3', '9,4', '9,5', '9,6', '9,7', '9,8', '9,9', '9,10', '9,12', '9,13', '9,14', '9,15', '9,16', '9,17', '9,18', '9,19', '9,21', '9,22', '9,23', '9,24', '9,25', '9,26', '9,27', '9,28', '9,30', '9,31', '9,32', '9,33', '9,34', '9,35', '9,36', '9,37', '9,39', '9,40', '9,41', '9,42', '9,43', '9,44', '9,45', '9,46', '9,48', '9,49', '9,50', '9,51', '9,52', '9,53', '9,54', '9,55', '24, 49', '24, 50', '24, 51', '24, 52', '24, 53', '24, 54', '24, 55', '24, 56'];\n\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 60; col++) {\n      const test = [row, col];\n      let text = test.toString();\n\n      if (Wallpoints.includes(text)) {\n        currentRow.push(createWall(col, row));\n        console.log('in if statment########################');\n      } else {\n        console.log('in if statment########################');\n        currentRow.push(createNode(col, row));\n      }\n    }\n\n    grid.push(currentRow);\n  }\n  /*\n    for (let row = 0; row < 34; row++) {\n   for (let col = 0; col < 60; col++) {\n     if ((row === 1) && (col === 0)){\n       const newGrid = grid.slice();\n       const node = newGrid[row][col];\n       const newNode = {\n       ...node,\n       isWall: !node.isWall,\n     };\n     newGrid[row][col] = newNode;\n    }\n   grid.push(currentRow);\n  }*/\n\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst createWall = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: true,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/khalidalmahrezi/Documents/GitHub/TeamNameNotFound/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","Wallpoints","currentRow","test","text","toString","includes","push","createWall","console","log","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 30;\nconst START_NODE_COL = 55;\nconst FINISH_NODE_ROW = 1;\nconst FINISH_NODE_COL = 2;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 1 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 1 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 1 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          do the thing\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  const Wallpoints = ['1,3', '1,4', '1,5','1,6','1,7','1,8','1,9','1,10','1,12','1,13','1,14','1,15','1,16','1,17','1,18','1,19','1,21','1,22','1,23','1,24','1,25','1,26','1,27','1,28','1,30','1,31','1,32','1,33','1,34','1,35','1,36','1,37','1,39','1,40','1,41','1,42','1,43','1,44','1,45','1,46','1,48','1,49','1,50','1,51','1,52','1,53','1,54','1,55',\n  '3,3', '3,4', '3,5','3,6','3,7','3,8','3,9','3,10','3,12','3,13','3,14','3,15','3,16','3,17','3,18','3,19','3,21','3,22','3,23','3,24','3,25','3,26','3,27','3,28','3,30','3,31','3,32','3,33','3,34','3,35','3,36','3,37','3,39','3,40','3,41','3,42','3,43','3,44','3,45','3,46','3,48','3,49','3,50','3,51','3,52','3,53','3,54','3,55',\n  '4,3', '4,4', '4,5','4,6','4,7','4,8','4,9','4,10','4,12','4,13','4,14','4,15','4,16','4,17','4,18','4,19','4,21','4,22','4,23','4,24','4,25','4,26','4,27','4,28','4,30','4,31','4,32','4,33','4,34','4,35','4,36','4,37','4,39','4,40','4,41','4,42','4,43','4,44','4,45','4,46','4,48','4,49','4,50','4,51','4,52','4,53','4,54','4,55',\n  '6,3', '6,4', '6,5','6,6','6,7','6,8','6,9','6,10','6,12','6,13','6,14','6,15','6,16','6,17','6,18','6,19','6,21','6,22','6,23','6,24','6,25','6,26','6,27','6,28','6,30','6,31','6,32','6,33','6,34','6,35','6,36','6,37','6,39','6,40','6,41','6,42','6,43','6,44','6,45','6,46','6,48','6,49','6,50','6,51','6,52','6,53','6,54','6,55',\n  '7,3', '7,4', '7,5','7,6','7,7','7,8','7,9','7,10','7,12','7,13','7,14','7,15','7,16','7,17','7,18','7,19','7,21','7,22','7,23','7,24','7,25','7,26','7,27','7,28','7,30','7,31','7,32','7,33','7,34','7,35','7,36','7,37','7,39','7,40','7,41','7,42','7,43','7,44','7,45','7,46','7,48','7,49','7,50','7,51','7,52','7,53','7,54','7,55',\n  '9,3', '9,4', '9,5','9,6','9,7','9,8','9,9','9,10','9,12','9,13','9,14','9,15','9,16','9,17','9,18','9,19','9,21','9,22','9,23','9,24','9,25','9,26','9,27','9,28','9,30','9,31','9,32','9,33','9,34','9,35','9,36','9,37','9,39','9,40','9,41','9,42','9,43','9,44','9,45','9,46','9,48','9,49','9,50','9,51','9,52','9,53','9,54','9,55'\n  ,'24, 49',    '24, 50',    '24, 51',    '24, 52',    '24, 53',    '24, 54',    '24, 55','24, 56',];\n\n  for (let row = 0; row < 40; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 60; col++) {\n      const test = [row,col];\n      let text = test.toString();\n      if (Wallpoints.includes(text)) {\n        \n        currentRow.push(createWall(col, row));\n        console.log('in if statment########################');\n\n      }else{\n        console.log('in if statment########################');\n        currentRow.push(createNode(col, row));\n      }\n\n    }\n    grid.push(currentRow);\n  }/*\n  \n  for (let row = 0; row < 34; row++) {\n    for (let col = 0; col < 60; col++) {\n      if ((row === 1) && (col === 0)){\n        const newGrid = grid.slice();\n        const node = newGrid[row][col];\n        const newNode = {\n        ...node,\n        isWall: !node.isWall,\n      };\n      newGrid[row][col] = newNode;\n\n    }\n    grid.push(currentRow);\n  }*/\n  \n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst createWall = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: true,\n    previousNode: null,\n  };\n}; \n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}